<!DOCTYPE html>
<html lang="en">
<%
  let dashboardBt ='';
  if (name == "admin") {
    dashboardBt = '<li class="nav-item"><a class="nav-link" href="/admin/dashboard">Dashborad <span class="sr-only">(current)</span></a></li>';
  }
  %>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
  <link rel="stylesheet" href="/stylesheets/mystyle.css">
  <title>web</title>
</head>

<body class="bgColor2">
  <nav class="navbar navbar-expand-lg navbar-light bgTransparent">
    <a class="navbar-brand" href="#">
      <img src="/images/si.jpg" width="30" height="30" class="d-inline-block align-top" alt="">
      Scientific Computing
    </a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav mr-auto">
        <li>
          <button type="button" class="btn btn-danger">
            <%= name  %></button>
        </li>
        <li class="nav-item active">
          <a class="nav-link" href="/landing">Home <span class="sr-only">(current)</span></a>
        </li>

        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Content
          </a>
          <div class="dropdown-menu" aria-labelledby="navbarDropdown">
            <a class="dropdown-item" href="/matrix/matrixmultiplication">Matrix Review</a>
            <a class="dropdown-item" href="/norm">Norm</a>
            <a class="dropdown-item" href="/linearequation">Systems of Linear Equations</a>
            <a class="dropdown-item" href="/interpolation">Interpolation</a>
            <!-- <div class="dropdown-divider"></div>
            <a class="dropdown-item" href="#">Something else here</a> -->
          </div>
        </li>
        <%- dashboardBt %>
        <li class="nav-item">
          <a class="nav-link" href="/logout">Log out <span class="sr-only">(current)</span></a>
        </li>

        <!-- <li class="nav-item">
        <a class="nav-link disabled" href="#" tabindex="-1" aria-disabled="true">Disabled</a>
      </li> -->
      </ul>
      <!-- <form class="form-inline my-2 my-lg-0">
      <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
      <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
    </form> -->
    </div>
  </nav>
  <div class="container">
    <div class="row my-5">

      <div class="col-12">
        <div class="card">
          <div class="card-body">
            <h1 class="card-title">Methods of Interpolation</h1>
            <hr>
            <h6 class="card-subtitle mb-2 ">Interpolation is the process of deriving a simple function from a set of discrete data points so that the function passes through all the given data points (i.e. reproduces the data points exactly) and can be used to estimate data points in-between the given ones.</h6>
<br>
            <h6 class="card-subtitle mb-2 ">Interpolation is also used to simplify complicated functions by sampling data points and interpolating them using a simpler function. Polynomials are commonly used for interpolation because they are easier to evaluate, differentiate, and integrate - known as polynomial interpolation.</h6>
<br>
<h4>Direct, Newton’s, and Lagrangian Methods of Interpolation</h4>
<hr>
<br>
            <h5><li>Direct Method</li></h5>
            <h6 class="card-subtitle mb-2 text-muted">A method of deriving a function with given (x<sub>0</sub>,y<sub>0</sub>), (x<sub>1</sub>,y<sub>1</sub>), … ,(x<sub>n</sub>,y<sub>n</sub>), and find the value of ‘y’ at a value of ‘x’ that is not given.<a class="nav-link" href="/directmethod">...Read more on Direct Method</a></h6>
            <h5><li>Newton Method</li></h5>
            <h6 class="card-subtitle mb-2 text-muted">Newton polynomial, named after its inventor Isaac Newton,it is an interpolation polynomial for a given set of data points. The Newton polynomial is sometimes called Newton's divided differences interpolation polynomial because the coefficients of the polynomial are calculated using Newton's divided differences method.<a class="nav-link" href="/newtonmethod">...Read more on Newton's Method</a></h6>
            <h5><li>Lagrance Method</li></h5>
            <h6 class="card-subtitle mb-2 text-muted">Lagrance polynomial is another form used for polynomial interpolation. It is called a form because with a given set of distinct points the interpolating polynomial is unique. We can arrive at the same polynomial through different methods.<a class="nav-link" href="/lagrancemethod">...Read more on Lagrance Method</a></h6>

            <br>
            <hr>

            <h3>Interpolate a Graph</h3>
            <br>
            <h6 class="card-subtitle mb-2 text-muted">Enter coordinates</h6>
            <div class="row  my-4">
              <div class="input-group justify-content-start" id="coorInput">
                <div class="col-sm-2 col-3 mb-4">
                  <input type="text" class="form-control form-control-sm rounded" id="coor1" placeholder="(x,y)" name="coor1" value="">
                </div>
                <div class="col-sm-2 col-3 mb-4">
                  <input type="text" class="form-control form-control-sm rounded" id="coor2" placeholder="(x,y)" name="coor2" value="">
                </div>
                <div class="col-sm-2 col-3 mb-4">
                  <input type="text" class="form-control form-control-sm rounded" id="coor3" placeholder="(x,y)" name="coor3" value="">
                </div>




              </div>
            </div>
            <div class="row justify-content-center my-4">
              <div class="col-12">
                <h3 id="errorMsg"></h3>
              </div>
            </div>

            <div class="row justify-content-center  my-4">
              <div class="btn-group" role="group">
                <label>Min X:</label>
                <input type="text" class="form-control form-control-sm rounded width2" id="minX"  name="coor3" value="-2">
                <label>Max X:</label>
                <input type="text" class="form-control form-control-sm rounded width2" id="maxX"  name="coor3" value="2">
              </div>
            </div>
            <div class="row justify-content-center  my-4">
              <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-success width2" onclick="addCoor()">+</button>
                <button type="button" class="btn btn-outline-danger width2" onclick="delCoor()">-</button>
              </div>
            </div>
            <div class="row justify-content-center my-4">
              <button type="button" class="btn btn-primary" onclick="calculateCoordinates()">Interpolate</button>
            </div>

            <div class="row justify-content-center my-5" id="rowInputGraph">
              <h4 id="hInputGraph"></h4>
              <canvas id="inputGraph" ></canvas>
            </div>

            <div class="row justify-content-center my-5" id="rowGraph">
              <h4 id="hGraph"></h4>
              <canvas id="graph" ></canvas>
              <h5 id="fxVal"></h5>
            </div>

            <div class="row justify-content-center my-5">
                <div id="fxVal" class="col-12 my-5"></div>
            </div>

          </div>
        </div>
      </div>

    </div>
  </div>
  <footer>
    <div class="jumbotron bgTransparent">

      <div class="col-6 col-sm-6">
        <img src="/images/SIITlogo.jpeg" width="100" height="70" class=" " alt="">
      </div>
      <div class="col-6 col-sm-6">
        <p class="lead">This is part of <strong>SIIT</strong> senior project. Created by <strong>G45</strong> </p>
        <hr>
        <!-- <a href="#">Facebook</a>
        <a href="#">Twitter</a> -->
      </div>
    </div>




  </footer>
  <!-- <img src="../chaweng.jpg" class="img-fluid" alt="Responsive image"> -->
  <!-- Optional JavaScript -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>

  <script type="text/javascript">
    let coorNum = 3;

    function addCoor() {
      coorNum++;
      let tempInput = '';
      document.getElementById("coorInput").innerHTML = "";
      for (let i = 1; i <= coorNum; i++) {
        tempInput += '<div class="col-sm-2 col-3 mb-4"><input type="text" class="form-control form-control-sm rounded" id="coor' + i + '" placeholder="(x,y)"name="coor' + i + '" value=""></div>';
      }
      $('#coorInput').append(tempInput);
    }

    function delCoor() {
      if (coorNum > 2) {
        coorNum--;
        let tempInput = '';
        document.getElementById("coorInput").innerHTML = "";
        for (let i = 1; i <= coorNum; i++) {
          tempInput += '<div class="col-sm-2 col-3 mb-4"><input type="text" class="form-control form-control-sm rounded" id="coor' + i + '" placeholder="(x,y)"name="coor' + i + '" value=""></div>';
        }
        $('#coorInput').append(tempInput);
      }
    }

    function calculateCoordinates() {
      let allowTosend = true;
      let toSendArray = [];
      document.getElementById("errorMsg").innerHTML = "";

      for (let i = 1; i <= coorNum; i++) {
        let tempArray = [];
        let idToGet = "coor" + i;
        let coorInString = document.getElementById(idToGet).value;
        let coorX = "";
        let coorY = "";
        if (coorInString[0] != "(") {
          allowTosend = false;
          console.log("value[" + i + "]!= '('");
          document.getElementById("errorMsg").append("Error: Invalid Input Format (must be (x,y))");
          break;
        }
        if (coorInString.search(",") == -1) {
          allowTosend = false;
          console.log("not found ','" + "in" + "value[" + i + "]");
          document.getElementById("errorMsg").append("Error: Invalid Input Format (must be (x,y))");

          break;
        }
        if (coorInString[coorInString.length - 1] != ")") {
          allowTosend = false;
          document.getElementById("errorMsg").append("Error: Invalid Input Format (must be (x,y))");
          break;
        }
        for (let j = 1; j < coorInString.indexOf(","); j++) {
          // read x
          coorX += coorInString[j];
        }
        for (let j = coorInString.indexOf(",") + 1; j < coorInString.length - 1; j++) {
          // read y
          coorY += coorInString[j];
        }
        if ($.isNumeric(coorX) && $.isNumeric(coorY)) {
          let floatCoorX = parseFloat(coorX);
          let floatCoorY = parseFloat(coorY);
          console.log("value[" + i + "] : x=" + floatCoorX + " ," + "y=" + floatCoorY);

          tempArray.push(floatCoorX);
          tempArray.push(floatCoorY);
          toSendArray.push(tempArray);
          console.log(toSendArray);
        } else {
          allowTosend = false;
          console.log("value[" + i + "]" + "coorX or coorY is not NUMERIC");
          document.getElementById("errorMsg").append("Error: Some of coordinates are not NUMERICS");

          break;
        }


      }
      // sendding data to server
      if (allowTosend) {

        let minX = document.getElementById('minX').value;
        let maxX = document.getElementById('maxX').value;
        $.post("interpolation/calculateinterpolation", {
            coordinateArray: toSendArray,
            minX: minX,
            maxX: maxX

          },
          function(data, status) {
            let solution = data.solution;
            let x = data.x;
            let isInvalid = data.isInvalid;
            console.log("isInvalid := "+isInvalid);
            console.log("Solution := ");
            console.log(solution);
            console.log("x:=",x);


            // draw graph
            // drawInterpolationGraph(solution);
            if(isInvalid){
              document.getElementById("errorMsg").append("Error!!");
            }
            else {
              //inputGraph
              document.getElementById('hInputGraph').innerHTML = 'Input graph';
              document.getElementById('hGraph').innerHTML = 'F(x) graph';
              let sortData = toSendArray.sort(function(a,b){
                return a[0] - b[0];
              });
              let inputX=[];
              let inputY=[];
              for(let i =0;i<sortData.length;i++){
                inputX.push(sortData[i][0]);
                inputY.push(sortData[i][1]);
              }
              console.log(inputX);
              console.log(inputY);
              var inputChart;
              var inputCtx;
              if(window.bar != undefined) {window.bar.destroy();}
              inputCtx = document.getElementById('inputGraph').getContext('2d');


              inputChart = new Chart(inputCtx, {
                  type: 'line',
                  data: {
                      labels: inputX,
                      datasets: [{
                          label: '',
                          fill: false,
                          data: inputY,
                          borderColor: 'lightgreen',

                          borderWidth: 1
                      }]
                  },
                  options: {
                      scales: {
                          yAxes: [{
                              ticks: {
                                  beginAtZero:false
                              }
                          }]
                      },
                      legend: {
                        display: false
                      }
                  }
              });

              // result graph
                callbackFunc(x,solution,drawGraph);
                // <table class="table table-bordered  table-striped table-sm " ><thead><tr><th scope="col">#</th>' + headColB + '</tr></thead><tbody>' + temp2 + '</tbody></table></div>'
                let outPutFxStr= '<table class="table table-bordered  table-striped table-sm " ><thead><tr><th scope="col">F(x) Output</th><th scope="col">value</th></tr></thead><tbody>';

                for(let i =0;i<x.length;i++){
                  outPutFxStr+= '<tr>'+'<th scope="row">'+"F("+x[i]+") "+'</th>'+'<td>'+ solution[i]+'</td>'+'</tr>';
                }
                outPutFxStr+= '</tbody></table>';
                $("#fxVal").html("");
                $('#fxVal').append(outPutFxStr);

            }
          });

      }
    }
    function callbackFunc(x,solution,callback) {
      // $('#rowGraph').append('<canvas id="graph" ></canvas>');

      callback(x,solution);
    }
    function drawGraph(x,solution){
      var myChart;
      var ctx;
      if(window.bar != undefined) {window.bar.destroy();}
      ctx = document.getElementById('graph').getContext('2d');

      myChart = new Chart(ctx, {
          type: 'line',
          data: {
              labels: x,
              datasets: [{
                  label: '',
                  fill: false,
                  data: solution,
                  borderColor: 'rgb(255, 99, 132)',

                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  yAxes: [{
                      ticks: {
                          beginAtZero:false
                      }
                  }]
              },
              legend: {
                display: false
              }
          }
      });



    }
  </script>
</body>

</html>
